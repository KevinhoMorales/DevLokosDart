import 'package:flutter/material.dart';
import '../models/episode.dart';
import '../services/youtube_scraper.dart';

class EpisodeProvider extends ChangeNotifier {
  List<Episode> _episodes = [];
  List<Episode> _featuredEpisodes = [];
  bool _isLoading = false;
  String? _errorMessage;

  List<Episode> get episodes => _episodes;
  List<Episode> get featuredEpisodes => _featuredEpisodes;
  bool get isLoading => _isLoading;
  String? get errorMessage => _errorMessage;

  /// Carga los episodios desde YouTube
  Future<void> loadEpisodes() async {
    try {
      print('üîÑ Iniciando carga de episodios...');
      _setLoading(true);
      _clearError();

      final episodes = await YouTubeScraper.getPlaylistEpisodes();
      
      print('üì∫ Episodios obtenidos: ${episodes.length}');
      _episodes = episodes;
      _featuredEpisodes = episodes.where((episode) => episode.isFeatured).toList();
      
      print('‚úÖ ${episodes.length} episodios cargados desde YouTube');
      print('‚≠ê ${_featuredEpisodes.length} episodios destacados');
    } catch (e) {
      _setError('Error al cargar episodios: $e');
      print('‚ùå Error al cargar episodios: $e');
    } finally {
      _setLoading(false);
      print('üèÅ Carga de episodios finalizada');
    }
  }

  /// Normaliza texto removiendo tildes y acentos para b√∫squeda
  String _normalizeText(String text) {
    const Map<String, String> accents = {
      // A con acentos
      '√°': 'a', '√†': 'a', '√§': 'a', '√¢': 'a', 'ƒÅ': 'a', '√£': 'a', '√•': 'a', '«é': 'a', 'ƒÉ': 'a', 'ƒÖ': 'a',
      '√Å': 'A', '√Ä': 'A', '√Ñ': 'A', '√Ç': 'A', 'ƒÄ': 'A', '√É': 'A', '√Ö': 'A', '«ç': 'A', 'ƒÇ': 'A', 'ƒÑ': 'A',
      // E con acentos
      '√©': 'e', '√®': 'e', '√´': 'e', '√™': 'e', 'ƒì': 'e', 'ƒõ': 'e', 'ƒï': 'e', 'ƒó': 'e', 'ƒô': 'e',
      '√â': 'E', '√à': 'E', '√ã': 'E', '√ä': 'E', 'ƒí': 'E', 'ƒö': 'E', 'ƒî': 'E', 'ƒñ': 'E', 'ƒò': 'E',
      // I con acentos
      '√≠': 'i', '√¨': 'i', '√Ø': 'i', '√Æ': 'i', 'ƒ´': 'i', '«ê': 'i', 'ƒ≠': 'i', 'ƒØ': 'i',
      '√ç': 'I', '√å': 'I', '√è': 'I', '√é': 'I', 'ƒ™': 'I', '«è': 'I', 'ƒ¨': 'I', 'ƒÆ': 'I',
      // O con acentos
      '√≥': 'o', '√≤': 'o', '√∂': 'o', '√¥': 'o', '≈ç': 'o', '√µ': 'o', '«í': 'o', '≈è': 'o', '√∏': 'o', '«´': 'o',
      '√ì': 'O', '√í': 'O', '√ñ': 'O', '√î': 'O', '≈å': 'O', '√ï': 'O', '«ë': 'O', '≈é': 'O', '√ò': 'O', '«™': 'O',
      // U con acentos
      '√∫': 'u', '√π': 'u', '√º': 'u', '√ª': 'u', '≈´': 'u', '«î': 'u', '≈≠': 'u', '≈≥': 'u',
      '√ö': 'U', '√ô': 'U', '√ú': 'U', '√õ': 'U', '≈™': 'U', '«ì': 'U', '≈¨': 'U', '≈≤': 'U',
      // N con acentos
      '√±': 'n', '≈Ñ': 'n', '≈à': 'n', '≈Ü': 'n',
      '√ë': 'N', '≈É': 'N', '≈á': 'N', '≈Ö': 'N',
      // C con acentos
      '√ß': 'c', 'ƒá': 'c', 'ƒç': 'c', 'ƒâ': 'c', 'ƒã': 'c',
      '√á': 'C', 'ƒÜ': 'C', 'ƒå': 'C', 'ƒà': 'C', 'ƒä': 'C',
      // S con acentos
      '≈õ': 's', '≈°': 's', '≈ü': 's', '≈ù': 's',
      '≈ö': 'S', '≈†': 'S', '≈û': 'S', '≈ú': 'S',
      // Z con acentos
      '≈∫': 'z', '≈æ': 'z', '≈º': 'z',
      '≈π': 'Z', '≈Ω': 'Z', '≈ª': 'Z',
      // D con acentos
      'ƒë': 'd', 'ƒè': 'd',
      'ƒê': 'D', 'ƒé': 'D',
      // L con acentos
      '≈Ç': 'l', 'ƒæ': 'l', 'ƒ∫': 'l',
      '≈Å': 'L', 'ƒΩ': 'L', 'ƒπ': 'L',
      // R con acentos
      '≈ô': 'r', '≈ï': 'r',
      '≈ò': 'R', '≈î': 'R',
      // T con acentos
      '≈•': 't', '≈£': 't',
      '≈§': 'T', '≈¢': 'T',
    };
    
    String normalized = text.toLowerCase();
    accents.forEach((accent, replacement) {
      normalized = normalized.replaceAll(accent, replacement);
    });
    
    // Debug: imprimir la normalizaci√≥n para verificar
    print('üî§ Provider normalizando: "$text" -> "$normalized"');
    
    return normalized;
  }

  /// Busca episodios por t√≠tulo o descripci√≥n (ignorando tildes)
  List<Episode> searchEpisodes(String query) {
    if (query.isEmpty) return _episodes;
    
    final normalizedQuery = _normalizeText(query);
    return _episodes.where((episode) {
      return _normalizeText(episode.title).contains(normalizedQuery) ||
             _normalizeText(episode.description).contains(normalizedQuery) ||
             episode.tags.any((tag) => _normalizeText(tag).contains(normalizedQuery));
    }).toList();
  }

  /// Obtiene un episodio por ID
  Episode? getEpisodeById(String id) {
    try {
      return _episodes.firstWhere((episode) => episode.id == id);
    } catch (e) {
      return null;
    }
  }

  /// Obtiene episodios por categor√≠a
  List<Episode> getEpisodesByCategory(String category) {
    return _episodes.where((episode) => episode.category == category).toList();
  }

  /// Obtiene todas las categor√≠as disponibles
  List<String> getCategories() {
    return _episodes.map((episode) => episode.category).toSet().toList();
  }

  /// Obtiene todos los tags disponibles
  List<String> getAllTags() {
    final allTags = <String>[];
    for (final episode in _episodes) {
      allTags.addAll(episode.tags);
    }
    return allTags.toSet().toList();
  }

  void _setLoading(bool loading) {
    _isLoading = loading;
    notifyListeners();
  }

  void _setError(String error) {
    _errorMessage = error;
    notifyListeners();
  }

  void _clearError() {
    _errorMessage = null;
    notifyListeners();
  }
}