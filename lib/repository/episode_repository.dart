import '../models/episode.dart';
import '../providers/youtube_provider.dart';

/// Repositorio para manejar la l√≥gica de datos de episodios
/// Implementa el patr√≥n Repository para separar la l√≥gica de datos
abstract class EpisodeRepository {
  /// Obtiene todos los episodios
  Future<List<Episode>> getAllEpisodes();
  
  /// Obtiene episodios destacados
  Future<List<Episode>> getFeaturedEpisodes();
  
  /// Obtiene un episodio por ID
  Future<Episode?> getEpisodeById(String id);
  
  /// Busca episodios por query
  Future<List<Episode>> searchEpisodes(String query);
  
  /// Obtiene episodios por categor√≠a
  Future<List<Episode>> getEpisodesByCategory(String category);
  
  /// Obtiene episodios por tag
  Future<List<Episode>> getEpisodesByTag(String tag);
  
  /// Obtiene episodios relacionados
  Future<List<Episode>> getRelatedEpisodes(String episodeId);
  
  /// Obtiene todas las categor√≠as
  Future<List<String>> getAllCategories();
  
  /// Obtiene todos los tags
  Future<List<String>> getAllTags();
  
  /// Limpia el cach√© y recarga los episodios
  Future<void> clearCacheAndReload();
}

/// Implementaci√≥n concreta del repositorio usando YouTube Provider
class EpisodeRepositoryImpl implements EpisodeRepository {
  final YouTubeProvider _youtubeProvider = YouTubeProvider();

  @override
  Future<List<Episode>> getAllEpisodes() async {
    try {
      print('üì° Repository: Obteniendo todos los episodios...');
      
      // Cargar videos desde YouTube (con cach√©)
      await _youtubeProvider.loadVideos();
      
      // Convertir YouTubeVideo a Episode
      final episodes = _youtubeProvider.videos.map((video) => _youtubeProvider.convertToEpisode(video)).toList();
      
      print('‚úÖ Repository: ${episodes.length} episodios obtenidos');
      return episodes;
    } catch (e) {
      print('‚ùå Repository: Error al obtener episodios - $e');
      rethrow;
    }
  }

  @override
  Future<List<Episode>> getFeaturedEpisodes() async {
    try {
      // Cargar videos desde YouTube (con cach√©)
      await _youtubeProvider.loadVideos();
      
      // Convertir YouTubeVideo destacados a Episode
      final featuredEpisodes = _youtubeProvider.featuredVideos.map((video) => _youtubeProvider.convertToEpisode(video)).toList();
      
      print('‚úÖ Repository: ${featuredEpisodes.length} episodios destacados obtenidos');
      return featuredEpisodes;
    } catch (e) {
      print('‚ùå Repository: Error al obtener episodios destacados - $e');
      rethrow;
    }
  }

  @override
  Future<Episode?> getEpisodeById(String id) async {
    try {
      final episodes = await getAllEpisodes();
      try {
        return episodes.firstWhere((episode) => episode.id == id);
      } catch (e) {
        return null;
      }
    } catch (e) {
      print('‚ùå Repository: Error al obtener episodio por ID - $e');
      rethrow;
    }
  }

  /// Normaliza texto removiendo tildes y acentos para b√∫squeda
  String _normalizeText(String text) {
    // Mapa completo de caracteres con acentos a sus equivalentes sin acento
    const Map<String, String> accents = {
      // A con acentos
      '√°': 'a', '√†': 'a', '√§': 'a', '√¢': 'a', 'ƒÅ': 'a', '√£': 'a', '√•': 'a', '«é': 'a', 'ƒÉ': 'a', 'ƒÖ': 'a',
      '√Å': 'A', '√Ä': 'A', '√Ñ': 'A', '√Ç': 'A', 'ƒÄ': 'A', '√É': 'A', '√Ö': 'A', '«ç': 'A', 'ƒÇ': 'A', 'ƒÑ': 'A',
      // E con acentos
      '√©': 'e', '√®': 'e', '√´': 'e', '√™': 'e', 'ƒì': 'e', 'ƒõ': 'e', 'ƒï': 'e', 'ƒó': 'e', 'ƒô': 'e',
      '√â': 'E', '√à': 'E', '√ã': 'E', '√ä': 'E', 'ƒí': 'E', 'ƒö': 'E', 'ƒî': 'E', 'ƒñ': 'E', 'ƒò': 'E',
      // I con acentos
      '√≠': 'i', '√¨': 'i', '√Ø': 'i', '√Æ': 'i', 'ƒ´': 'i', '«ê': 'i', 'ƒ≠': 'i', 'ƒØ': 'i',
      '√ç': 'I', '√å': 'I', '√è': 'I', '√é': 'I', 'ƒ™': 'I', '«è': 'I', 'ƒ¨': 'I', 'ƒÆ': 'I',
      // O con acentos
      '√≥': 'o', '√≤': 'o', '√∂': 'o', '√¥': 'o', '≈ç': 'o', '√µ': 'o', '«í': 'o', '≈è': 'o', '√∏': 'o', '«´': 'o',
      '√ì': 'O', '√í': 'O', '√ñ': 'O', '√î': 'O', '≈å': 'O', '√ï': 'O', '«ë': 'O', '≈é': 'O', '√ò': 'O', '«™': 'O',
      // U con acentos
      '√∫': 'u', '√π': 'u', '√º': 'u', '√ª': 'u', '≈´': 'u', '«î': 'u', '≈≠': 'u', '≈≥': 'u',
      '√ö': 'U', '√ô': 'U', '√ú': 'U', '√õ': 'U', '≈™': 'U', '«ì': 'U', '≈¨': 'U', '≈≤': 'U',
      // N con acentos
      '√±': 'n', '≈Ñ': 'n', '≈à': 'n', '≈Ü': 'n',
      '√ë': 'N', '≈É': 'N', '≈á': 'N', '≈Ö': 'N',
      // C con acentos
      '√ß': 'c', 'ƒá': 'c', 'ƒç': 'c', 'ƒâ': 'c', 'ƒã': 'c',
      '√á': 'C', 'ƒÜ': 'C', 'ƒå': 'C', 'ƒà': 'C', 'ƒä': 'C',
      // S con acentos
      '≈õ': 's', '≈°': 's', '≈ü': 's', '≈ù': 's',
      '≈ö': 'S', '≈†': 'S', '≈û': 'S', '≈ú': 'S',
      // Z con acentos
      '≈∫': 'z', '≈æ': 'z', '≈º': 'z',
      '≈π': 'Z', '≈Ω': 'Z', '≈ª': 'Z',
      // D con acentos
      'ƒë': 'd', 'ƒè': 'd',
      'ƒê': 'D', 'ƒé': 'D',
      // L con acentos
      '≈Ç': 'l', 'ƒæ': 'l', 'ƒ∫': 'l',
      '≈Å': 'L', 'ƒΩ': 'L', 'ƒπ': 'L',
      // R con acentos
      '≈ô': 'r', '≈ï': 'r',
      '≈ò': 'R', '≈î': 'R',
      // T con acentos
      '≈•': 't', '≈£': 't',
      '≈§': 'T', '≈¢': 'T',
    };
    
    String normalized = text.toLowerCase();
    accents.forEach((accent, replacement) {
      normalized = normalized.replaceAll(accent, replacement);
    });
    
    // Debug: imprimir la normalizaci√≥n para verificar
    print('üî§ Normalizando: "$text" -> "$normalized"');
    
    return normalized;
  }

  @override
  Future<List<Episode>> searchEpisodes(String query) async {
    try {
      if (query.isEmpty) return await getAllEpisodes();
      
      final episodes = await getAllEpisodes();
      final normalizedQuery = _normalizeText(query.trim());
      
      print('üîç Repository: Buscando "$normalizedQuery" en ${episodes.length} episodios');
      
      final searchResults = episodes.where((episode) {
        // Filtrar episodios con t√≠tulos vac√≠os o "Sin t√≠tulo"
        if (episode.title.isEmpty || episode.title.toLowerCase() == 'sin t√≠tulo') {
          return false;
        }
        
        final normalizedTitle = _normalizeText(episode.title);
        final normalizedDescription = _normalizeText(episode.description);
        
        // B√∫squeda en el t√≠tulo completo (normalizado)
        if (normalizedTitle.contains(normalizedQuery)) {
          print('‚úÖ Encontrado en t√≠tulo: ${episode.title}');
          return true;
        }
        
        // B√∫squeda en las partes del t√≠tulo separadas por ||
        // Formato: "DevLokos S1 Ep019 || Descripci√≥n del episodio || Invitado"
        final titleParts = normalizedTitle.split('||');
        for (final part in titleParts) {
          final cleanPart = part.trim();
          if (cleanPart.contains(normalizedQuery)) {
            print('‚úÖ Encontrado en parte del t√≠tulo: $cleanPart');
            return true;
          }
        }
        
        // B√∫squeda en la descripci√≥n (normalizada)
        if (normalizedDescription.contains(normalizedQuery)) {
          print('‚úÖ Encontrado en descripci√≥n: ${episode.title}');
          return true;
        }
        
        // B√∫squeda en tags (normalizados)
        if (episode.tags.any((tag) => _normalizeText(tag).contains(normalizedQuery))) {
          print('‚úÖ Encontrado en tags: ${episode.title}');
          return true;
        }
        
        // B√∫squeda por palabras individuales en el t√≠tulo (normalizadas)
        final queryWords = normalizedQuery.split(' ').where((word) => word.length >= 2).toList();
        if (queryWords.isNotEmpty) {
          final titleWords = normalizedTitle.split(RegExp(r'[\s\|\|]+'));
          bool allWordsFound = true;
          
          for (final queryWord in queryWords) {
            bool wordFound = false;
            for (final titleWord in titleWords) {
              if (titleWord.contains(queryWord) || queryWord.contains(titleWord)) {
                wordFound = true;
                break;
              }
            }
            if (!wordFound) {
              allWordsFound = false;
              break;
            }
          }
          
          if (allWordsFound) {
            print('‚úÖ Encontrado por palabras m√∫ltiples: ${episode.title}');
            return true;
          }
        }
        
        return false;
      }).toList();
      
      print('‚úÖ Repository: ${searchResults.length} resultados encontrados para "$normalizedQuery"');
      return searchResults;
    } catch (e) {
      print('‚ùå Repository: Error al buscar episodios - $e');
      rethrow;
    }
  }

  @override
  Future<List<Episode>> getEpisodesByCategory(String category) async {
    try {
      final episodes = await getAllEpisodes();
      return episodes.where((episode) => episode.category == category).toList();
    } catch (e) {
      print('‚ùå Repository: Error al obtener episodios por categor√≠a - $e');
      rethrow;
    }
  }

  @override
  Future<List<Episode>> getEpisodesByTag(String tag) async {
    try {
      final episodes = await getAllEpisodes();
      return episodes.where((episode) => 
        episode.tags.any((episodeTag) => episodeTag.toLowerCase() == tag.toLowerCase())
      ).toList();
    } catch (e) {
      print('‚ùå Repository: Error al obtener episodios por tag - $e');
      rethrow;
    }
  }

  @override
  Future<List<Episode>> getRelatedEpisodes(String episodeId) async {
    try {
      final targetEpisode = await getEpisodeById(episodeId);
      if (targetEpisode == null) return [];
      
      final allEpisodes = await getAllEpisodes();
      
      // Encontrar episodios relacionados por categor√≠a o tags similares
      final relatedEpisodes = allEpisodes.where((episode) {
        if (episode.id == episodeId) return false;
        
        // Mismo categor√≠a
        if (episode.category == targetEpisode.category) return true;
        
        // Tags similares (al menos 2 tags en com√∫n)
        final commonTags = episode.tags.where((tag) => 
          targetEpisode.tags.contains(tag)
        ).length;
        
        return commonTags >= 2;
      }).take(3).toList(); // M√°ximo 3 episodios relacionados
      
      return relatedEpisodes;
    } catch (e) {
      print('‚ùå Repository: Error al obtener episodios relacionados - $e');
      rethrow;
    }
  }

  @override
  Future<List<String>> getAllCategories() async {
    try {
      final episodes = await getAllEpisodes();
      return episodes.map((episode) => episode.category).toSet().toList();
    } catch (e) {
      print('‚ùå Repository: Error al obtener categor√≠as - $e');
      rethrow;
    }
  }

  @override
  Future<List<String>> getAllTags() async {
    try {
      final episodes = await getAllEpisodes();
      final allTags = <String>[];
      for (final episode in episodes) {
        allTags.addAll(episode.tags);
      }
      return allTags.toSet().toList();
    } catch (e) {
      print('‚ùå Repository: Error al obtener tags - $e');
      rethrow;
    }
  }

  @override
  Future<void> clearCacheAndReload() async {
    try {
      print('üóëÔ∏è Repository: Limpiando cach√© y recargando episodios...');
      await _youtubeProvider.clearCacheAndReload();
      print('‚úÖ Repository: Cach√© limpiado y episodios recargados');
    } catch (e) {
      print('‚ùå Repository: Error al limpiar cach√© - $e');
      rethrow;
    }
  }
}
